pipeline {
    agent any
    parameters {
        choice(name: 'SCAN_TYPE', choices: ['Baseline', 'APIS', 'Full'], description: 'Type of scan that will be performed.')
        string(name: 'TARGET', defaultValue: 'http://example.com', description: 'Target URL to scan')
        booleanParam(name: 'GENERATE_REPORT', defaultValue: true, description: 'Whether to generate a scan report')
    }
    stages {
        stage('Pull ZAP Docker Image') {
            steps {
                script {
                    echo 'Pulling ZAP Docker image from GitHub Container Registry...'
                    sh 'docker pull ghcr.io/zaproxy/zaproxy:latest'
                }
            }
        }
 
        stage('Run ZAP Container') {
            steps {
                script {
                    echo 'Running ZAP container...'
                    sh 'docker run -dt --name zaproxy ghcr.io/zaproxy/zaproxy:latest /bin/bash'
                }
            }
        }
 
        stage('Scan Target with ZAP') {
            steps {
                script {
                    def scan_type = "${params.SCAN_TYPE}"
                    def target = "${params.TARGET}"
 
                    if (scan_type == 'Baseline') {
                        echo 'Running Baseline scan...'
                        sh """
                            docker exec zaproxy mkdir -p /zap/wrk
                            docker exec zaproxy python zap-baseline.py -t $target
                        """
                    } else if (scan_type == 'APIS') {
                        echo 'Running API scan...'
                        sh """
                            docker exec zaproxy python zap-api-scan.py -t http://example.com/api/openapi.json -f openapi 
                        """
                    } else if (scan_type == 'Full') {
                        echo 'Running Full scan...'
                        sh """
                            docker exec zaproxy python zap-full-scan.py -t $target 
                        """
                    }
                }
            }
        }
    }
 
    post {
        always {
            echo 'Cleaning up ZAP container...'
            sh 'docker rm -f zaproxy'
        }
 
        success {
            echo 'Scan completed successfully!'
        }
 
        failure {
            echo 'Scan failed!'
        }
    }
}    
    
